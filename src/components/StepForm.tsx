
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription } from "@/components/ui/card";
import { PromptData } from "./PromptGenerator";

interface StepFormProps {
  step: number;
  promptData: PromptData;
  onUpdate: (field: keyof PromptData, value: string) => void;
}

export const StepForm = ({ step, promptData, onUpdate }: StepFormProps) => {
  const povOptions = [
    { value: "pov-celular", label: "POV de quem est√° segurando o celular" },
    { value: "terceira-pessoa", label: "Terceira pessoa, c√¢mera distante seguindo a pessoa" },
    { value: "over-shoulder", label: "Over-the-shoulder (atr√°s do ombro da personagem)" },
    { value: "primeira-pessoa", label: "Primeira pessoa, como se fosse meus olhos" },
    { value: "drone-aereo", label: "Vista a√©rea de drone seguindo o movimento" },
    { value: "close-up", label: "Close-up focando nos detalhes faciais" },
    { value: "plano-medio", label: "Plano m√©dio mostrando corpo da cintura para cima" },
    { value: "plano-geral", label: "Plano geral mostrando todo o cen√°rio" },
    { value: "camera-baixa", label: "C√¢mera baixa olhando para cima" },
    { value: "camera-alta", label: "C√¢mera alta olhando para baixo" }
  ];

  const styleOptions = [
    { value: "cinematografico", label: "Filmado em estilo cinematogr√°fico com luz suave" },
    { value: "vlog-tremido", label: "Grava√ß√£o tremida como um vlog" },
    { value: "vintage", label: "Cores frias, com gr√£o de filme e est√©tica vintage" },
    { value: "documentary", label: "Estilo documental realista e natural" },
    { value: "noir", label: "Film noir com contrastes dram√°ticos de luz e sombra" },
    { value: "golden-hour", label: "Golden hour com luz dourada e quente" },
    { value: "neon-cyberpunk", label: "Ilumina√ß√£o neon estilo cyberpunk" },
    { value: "minimalista", label: "Composi√ß√£o minimalista e limpa" },
    { value: "handheld", label: "C√¢mera na m√£o com movimento org√¢nico" },
    { value: "steadicam", label: "Movimento fluido de steadicam profissional" }
  ];

  const renderStepContent = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üß† <strong>Dica:</strong> Pense em uma situa√ß√£o espec√≠fica e humana. 
                  Pode ser algo cotidiano como "acordar atrasado" ou emocional como "chorar de al√≠vio".
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="scene" className="text-white">
                Descreva sua cena cotidiana ou emocional:
              </Label>
              <Textarea
                id="scene"
                placeholder="Ex: Uma mulher jovem acordando atrasada, correndo pela casa procurando as chaves..."
                value={promptData.scene}
                onChange={(e) => onUpdate('scene', e.target.value)}
                className="bg-white/10 border-purple-200/30 text-white placeholder-gray-400 min-h-[100px]"
              />
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üìç <strong>Importante:</strong> O ponto de vista define como o espectador vai vivenciar a cena. 
                  Cada op√ß√£o cria uma sensa√ß√£o diferente.
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="pov" className="text-white">
                Escolha o ponto de vista da c√¢mera:
              </Label>
              <Select value={promptData.pov} onValueChange={(value) => onUpdate('pov', value)}>
                <SelectTrigger className="bg-white/10 border-purple-200/30 text-white">
                  <SelectValue placeholder="Selecione um ponto de vista..." />
                </SelectTrigger>
                <SelectContent className="bg-gray-900 border-purple-200/30">
                  {povOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value} className="text-white">
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üè† <strong>Contexto √© tudo:</strong> O ambiente ajuda a IA a posicionar corretamente o cen√°rio. 
                  Seja espec√≠fico sobre luz, espa√ßo e atmosfera.
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="environment" className="text-white">
                Descreva o ambiente e cen√°rio:
              </Label>
              <Textarea
                id="environment"
                placeholder="Ex: em uma cozinha moderna iluminada por luz natural da manh√£..."
                value={promptData.environment}
                onChange={(e) => onUpdate('environment', e.target.value)}
                className="bg-white/10 border-purple-200/30 text-white placeholder-gray-400 min-h-[100px]"
              />
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üé¨ <strong>Movimento √© vida:</strong> Evite cenas est√°ticas. 
                  Pequenos gestos naturais fazem toda a diferen√ßa para parecer real.
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="movements" className="text-white">
                Adicione movimentos humanos naturais:
              </Label>
              <Textarea
                id="movements"
                placeholder="Ex: ela mexe no cabelo nervosamente enquanto olha o rel√≥gio..."
                value={promptData.movements}
                onChange={(e) => onUpdate('movements', e.target.value)}
                className="bg-white/10 border-purple-200/30 text-white placeholder-gray-400 min-h-[100px]"
              />
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üòä <strong>Emo√ß√£o genu√≠na:</strong> A express√£o facial √© o que conecta o espectador com o personagem. 
                  Seja sutil e espec√≠fico.
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="emotion" className="text-white">
                Descreva a express√£o facial ou emo√ß√£o:
              </Label>
              <Textarea
                id="emotion"
                placeholder="Ex: com um sorriso cansado mas aliviado no rosto..."
                value={promptData.emotion}
                onChange={(e) => onUpdate('emotion', e.target.value)}
                className="bg-white/10 border-purple-200/30 text-white placeholder-gray-400 min-h-[100px]"
              />
            </div>
          </div>
        );

      case 6:
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üéµ <strong>Desperte os sentidos:</strong> Som e toque d√£o profundidade √† cena. 
                  Estes detalhes criam imers√£o total.
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="sensory" className="text-white">
                Adicione elementos sensoriais (som, toque):
              </Label>
              <Textarea
                id="sensory"
                placeholder="Ex: som suave de chuva na janela e o tic-tac do rel√≥gio..."
                value={promptData.sensory}
                onChange={(e) => onUpdate('sensory', e.target.value)}
                className="bg-white/10 border-purple-200/30 text-white placeholder-gray-400 min-h-[100px]"
              />
            </div>
          </div>
        );

      case 7:
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üé® <strong>Toque final:</strong> O estilo visual define a atmosfera geral do seu v√≠deo. 
                  Escolha o que melhor combina com sua hist√≥ria.
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="style" className="text-white">
                Escolha o estilo visual ou cinematogr√°fico:
              </Label>
              <Select value={promptData.style} onValueChange={(value) => onUpdate('style', value)}>
                <SelectTrigger className="bg-white/10 border-purple-200/30 text-white">
                  <SelectValue placeholder="Selecione um estilo visual..." />
                </SelectTrigger>
                <SelectContent className="bg-gray-900 border-purple-200/30">
                  {styleOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value} className="text-white">
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        );

      case 8:
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üé≠ <strong>Quantidade de personagens na cena:</strong> Informe o n√∫mero de personagens presentes na cena.
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="charactersCount" className="text-white">
                Quantidade de personagens:
              </Label>
              <Input
                id="charactersCount"
                type="number"
                min={1}
                placeholder="Ex: 3"
                value={promptData.charactersCount}
                onChange={(e) => onUpdate('charactersCount', e.target.value)}
                className="bg-white/10 border-purple-200/30 text-white placeholder-gray-400"
              />
            </div>
          </div>
        );

      case 9: {
        const languageOptions = [
          { value: "brasilian-portuguese", label: "Portuguese Brasil" },
          { value: "english", label: "English" },
          { value: "mandarin", label: "Mandarin Chinese" },
          { value: "spanish", label: "Spanish" },
          { value: "hindi", label: "Hindi" },
          { value: "arabic", label: "Arabic" },
          { value: "portuguese", label: "Portuguese" },
          { value: "bengali", label: "Bengali" },
          { value: "russian", label: "Russian" },
          { value: "japanese", label: "Japanese" },
          { value: "punjabi", label: "Punjabi" }
        ];
        return (
          <div className="space-y-4">
            <Card className="bg-purple-50/10 border-purple-200/30">
              <CardContent className="pt-4">
                <CardDescription className="text-gray-300 mb-4">
                  üó£Ô∏è <strong>Linguagem do di√°logo do v√≠deo:</strong> Selecione a linguagem do di√°logo.
                </CardDescription>
              </CardContent>
            </Card>
            <div className="space-y-2">
              <Label htmlFor="dialogLanguage" className="text-white">
                Linguagem do di√°logo:
              </Label>
              <Select value={promptData.dialogLanguage} onValueChange={(value) => onUpdate('dialogLanguage', value)}>
                <SelectTrigger className="bg-white/10 border-purple-200/30 text-white">
                  <SelectValue placeholder="Selecione uma linguagem..." />
                </SelectTrigger>
                <SelectContent className="bg-gray-900 border-purple-200/30">
                  {languageOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value} className="text-white">
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        );
      }

      default:
        return null;
    }
  };

  return <div>{renderStepContent()}</div>;
};
